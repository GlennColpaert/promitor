name: $(Date:yyyyMMdd)$(Rev:r)
resources:
- repo: self
trigger:
- master
pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - build/azure-devops/agents-ci-scraper.yml
    - charts/promitor-agent-scraper/*
variables:
  - group: 'GitHub Container Registry'
  - template: ./variables/build.yml
  - template: ./variables/helm.yml
  - name: Image.Name
    value: 'tomkerkhove/sandbox-container-image'
  - name: Image.TaggedName
    value: '$(Image.Name):$(Tags.PR)'
  - name: App.Version
    value: '0.0.0-$(Image.Tag)'
  - name: Helm.Chart.Version
    value: '0.0.0-$(App.Version)'
  - name: Helm.Chart.Name
    value: 'promitor-agent-scraper'
stages:
- stage: Init
  displayName: Prepare Build
  dependsOn: []
  jobs:
   - job: DetermineVersion
     displayName: Determine Version
     pool:
       vmImage: ubuntu-16.04
     steps:
     - template: templates/utils/persist-variable.yml
       parameters:
        currentVariableName: 'Build.BuildNumber'
        persistedVariableName: 'Image.Tag'
     - publish: $(Pipeline.Workspace)/variables
       artifact: variables
- stage: Docker
  displayName: Docker Image
  dependsOn: [Init]
  variables:
  - group: 'Agent Authentication'
  - name: Tags.PR
    value: '$(Image.Tag)-$(OS.Name)'
  - name: Container.Scraper.Port
    value: 8999
  - name: Agent.Scraper.Version
    value: $(App.Version)
  - name: Agent.Scraper.BaseUrl
    value: http://localhost:$(Container.Scraper.Port)
  - name: Agent.ResourceDiscovery.BaseUrl
    value: NOTUSED
  - name: Agent.ResourceDiscovery.Version
    value: NOTUSED
  - name: Container.Scraper.Name
    value: 'promitor.scraper.agent'
  - name: Container.ResourceDiscovery.Name
    value: 'promitor.agents.resourcediscovery'
  - name: Container.ResourceDiscovery.Port
    value: '999'
  - name: Container.Network.Name
    value: 'ci-network'
  - name: Image.ResourceDiscovery.Name
    value: 'local/promitor-resource-discovery:dev'
  jobs:
   - job: DockerBuildLinux
     displayName: Build Docker Image (Linux)
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     variables:
       Image.TaggedName.OSAgnostic: '$(Image.Name):$(Image.Tag)'
       Tags.Experimental: 'experimental-$(OS.Name)'
       OS.Name: 'linux'
     steps:
     - download: current
       artifact: variables
     - template: templates/utils/read-variable-on-linux.yml
       parameters:
        variableName: 'Image.Tag'
     - template: templates/build-scraper-image.yml
       parameters:
        imageName: '$(Image.TaggedName)'
        tags: '--tag sandbox-container-image --tag ghcr.io/tomkerkhove/sandbox-container-image-sandbox:$(Image.Tag) --tag ghcr.io/tomkerkhove/github-package-registry-sandbox/sandbox-container-image-sandbox:$(Image.Tag) --tag $(Image.TaggedName.OSAgnostic)'
        buildArgs: 'VERSION="$(App.Version)"'
        os: '$(OS.Name)'
     
     - task: PowerShell@2
       inputs:
         targetType: 'inline'
         script: |
           docker login ghcr.io --username $(ContainerRegistry.GitHub.Username) --password $(ContainerRegistry.GitHub.Token)
           docker push ghcr.io/tomkerkhove/sandbox-container-image-sandbox:$(Image.Tag)
         errorActionPreference: 'continue'
         ignoreLASTEXITCODE: true
         pwsh: true
     - task: PowerShell@2
       inputs:
        targetType: 'inline'
        script: |
         docker login ghcr.io --username $(ContainerRegistry.GitHub.Username) --password $(ContainerRegistry.GitHub.Token)
         docker push ghcr.io/tomkerkhove/github-package-registry-sandbox/sandbox-container-image-sandbox:$(Image.Tag)